"use strict";var TestimonialsService_1,__decorate=this&&this.__decorate||function(e,t,i,s){var o,n=arguments.length,r=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(r=(n<3?o(r):n>3?o(t,i,r):o(t,i))||r);return n>3&&r&&Object.defineProperty(t,i,r),r},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},__param=this&&this.__param||function(e,t){return function(i,s){t(i,s,e)}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.TestimonialsService=void 0;const core_1=require("@mikro-orm/core"),nestjs_1=require("@mikro-orm/nestjs"),common_1=require("@nestjs/common"),testimonial_entity_1=require("../model/testimonial.entity");let TestimonialsService=TestimonialsService_1=class{constructor(e,t){this.testimonialsRepository=e,this.em=t,this.MAX_LIMIT=5,this.logger=new common_1.Logger(TestimonialsService_1.name)}async findAll(){return this.logger.debug("Find all testimonials"),this.testimonialsRepository.findAll()}async createTestimonial(e,t,i){this.logger.debug(`Create a testimonial. Name: ${e}, title: ${i}, message: ${e}`);const s=this.em.getConnection(),o=await s.execute("select * from testimonial where id is not null order by created_at");if((null==o?void 0:o.length)>=this.MAX_LIMIT){const e=o.splice(-1*(this.MAX_LIMIT-1)).map((e=>e.id));await s.execute("delete from testimonial where id not in(?)",[e])}const n=new testimonial_entity_1.Testimonial;return n.message=e,n.name=t,n.title=i,await this.testimonialsRepository.persistAndFlush(n),this.logger.debug("Saved new testimonial"),n}async count(e){try{return this.logger.debug("Saved new testimonial"),(await this.em.getConnection().execute(e))[0].count}catch(e){return this.logger.warn(`Failed to execute query. Error: ${e.message}`),e.message}}};TestimonialsService=TestimonialsService_1=__decorate([common_1.Injectable(),__param(0,nestjs_1.InjectRepository(testimonial_entity_1.Testimonial)),__metadata("design:paramtypes",[core_1.EntityRepository,core_1.EntityManager])],TestimonialsService),exports.TestimonialsService=TestimonialsService;