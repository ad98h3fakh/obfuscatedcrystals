"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.JwtTokenProcessor=void 0;const common_1=require("@nestjs/common");class JwtTokenProcessor{constructor(e){this.log=new common_1.Logger(JwtTokenProcessor.name),this.log=e}parse(e){this.log.debug("Call parse");const o=e.split(".");if(3!=o.length||!o[0])throw new Error("Failed to parse jwt token header");const r=Buffer.from(o[0],"base64").toString("ascii");this.log.debug(`Jwt token header is ${r}`);const s=JSON.parse(r),t=Buffer.from(o[1],"base64").toString("ascii");this.log.debug(`Jwt token (None alg) payload is ${t}`);return[s,JSON.parse(t)]}parseCRTChain(e){this.log.debug("Call parseCRTChain");let o=-1;if(!e||-1===(o=Math.max(e.indexOf(JwtTokenProcessor.END_CERTIFICATE_MARK),e.indexOf(JwtTokenProcessor.END_PUBLIC_KEY_MARK))))throw new Error("Invalid certificate");const r=e.slice(0,o+JwtTokenProcessor.END_CERTIFICATE_MARK.length);return this.log.debug(`Extracted key\n${r}`),r}}exports.JwtTokenProcessor=JwtTokenProcessor,JwtTokenProcessor.END_CERTIFICATE_MARK="-----END CERTIFICATE-----",JwtTokenProcessor.END_PUBLIC_KEY_MARK="-----END PUBLIC KEY-----";