"use strict";var UsersService_1,__decorate=this&&this.__decorate||function(e,s,t,r){var i,o=arguments.length,n=o<3?s:null===r?r=Object.getOwnPropertyDescriptor(s,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,s,t,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(n=(o<3?i(n):o>3?i(s,t,n):i(s,t))||n);return o>3&&n&&Object.defineProperty(s,t,n),n},__metadata=this&&this.__metadata||function(e,s){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,s)},__param=this&&this.__param||function(e,s){return function(t,r){s(t,r,e)}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.UsersService=void 0;const core_1=require("@mikro-orm/core"),nestjs_1=require("@mikro-orm/nestjs"),common_1=require("@nestjs/common"),PermissionDto_1=require("./api/PermissionDto"),credentials_utils_1=require("../auth/credentials.utils"),user_entity_1=require("../model/user.entity");let UsersService=UsersService_1=class{constructor(e){this.usersRepository=e,this.log=new common_1.Logger(UsersService_1.name)}async createUser(e){this.log.debug("Called createUser");const s=new user_entity_1.User;return s.email=e.email,s.firstName=e.firstName,s.lastName=e.lastName,s.isAdmin=e.isAdmin||!1,s.password=await credentials_utils_1.hashPassword(e.password),await this.usersRepository.persistAndFlush(s),this.log.debug("Saved new user"),s}async updatePhoto(e,s){this.log.debug(`updatePhoto for ${e}`);const t=await this.findByEmail(e);if(!t)throw new core_1.NotFoundError("Could not find user");return core_1.wrap(t).assign({photo:s}),await this.usersRepository.persistAndFlush(t),t}async updateUserInfo(e,s){this.log.debug(`updateUserInfo ${e.email}`);const t=e;core_1.wrap(t).assign(Object.assign({},s)),await this.usersRepository.persistAndFlush(t);const r=Object.create(t);return Object.assign(r,s),Object.assign(Object.assign({},t),r.__proto__)}async findByEmail(e){this.log.debug(`Called findByEmail ${e}`);const s=await this.usersRepository.findOne({email:e});if(s)return s;throw new common_1.NotFoundException("User not found")}async getPermissions(e){const s=await this.usersRepository.findOne({email:e});return new PermissionDto_1.PermissionDto({isAdmin:s.isAdmin})}async findByEmailPrefix(e){return this.log.debug(`Called findByEmailPrefix ${e}`),this.usersRepository.find({email:{$like:e+"%"}})}};UsersService.LDAP_SEARCH_QUERY=e=>`(&(objectClass=person)(objectClass=user)(email=${e}))`,UsersService.LDAP_ERROR_RESPONSE="\n      Lookup failed: javax.naming.NamingException:\n      [LDAP: error code 1 - 000004DC: Lda pErr: DSID-0C0906DC, comment: context not found., data 0, v1db1 ];\n      remaining name: 'OU=Users,O=BrokenCrystals'\n    ",UsersService=UsersService_1=__decorate([common_1.Injectable(),__param(0,nestjs_1.InjectRepository(user_entity_1.User)),__metadata("design:paramtypes",[core_1.EntityRepository])],UsersService),exports.UsersService=UsersService;