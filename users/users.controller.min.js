"use strict";var UsersController_1,__decorate=this&&this.__decorate||function(e,r,t,s){var o,a=arguments.length,n=a<3?r:null===s?s=Object.getOwnPropertyDescriptor(r,t):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,r,t,s);else for(var i=e.length-1;i>=0;i--)(o=e[i])&&(n=(a<3?o(n):a>3?o(r,t,n):o(r,t))||n);return a>3&&n&&Object.defineProperty(r,t,n),n},__metadata=this&&this.__metadata||function(e,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,r)},__param=this&&this.__param||function(e,r){return function(t,s){r(t,s,e)}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.UsersController=void 0;const common_1=require("@nestjs/common"),swagger_1=require("@nestjs/swagger"),CreateUserRequest_1=require("./api/CreateUserRequest"),UserDto_1=require("./api/UserDto"),ldap_query_handler_1=require("./ldap.query.handler"),users_service_1=require("./users.service"),stream_1=require("stream"),auth_guard_1=require("../auth/auth.guard"),jwt_type_decorator_1=require("../auth/jwt/jwt.type.decorator"),auth_service_1=require("../auth/auth.service"),any_files_interceptor_1=require("../components/any-files.interceptor"),keycloak_service_1=require("../keycloak/keycloak.service"),users_controller_swagger_desc_1=require("./users.controller.swagger.desc"),users_guard_1=require("./users.guard");let UsersController=UsersController_1=class{constructor(e,r){this.usersService=e,this.keyCloakService=r,this.logger=new common_1.Logger(UsersController_1.name),this.ldapQueryHandler=new ldap_query_handler_1.LdapQueryHandler}async getTestOptions(){this.logger.debug("Test OPTIONS")}async getUser(e){try{return this.logger.debug(`Find a user by email: ${e}`),new UserDto_1.UserDto(await this.usersService.findByEmail(e))}catch(e){throw new common_1.HttpException(e.message,e.status)}}async getUserPhoto(e,r){this.logger.debug(`Find a user photo by email: ${e}`);const t=await this.usersService.findByEmail(e);if(!t)throw new common_1.NotFoundException({error:"Could not file user",location:__filename});if(t.photo)try{const e=new stream_1.Readable({read(){this.push(t.photo),this.push(null)}});return r.type("image/png"),e}catch(e){throw new common_1.InternalServerErrorException({error:e.message,location:__filename})}else r.status(common_1.HttpStatus.NO_CONTENT)}async ldapQuery(e){let r;this.logger.debug(`Call ldapQuery: ${e}`);try{const t=this.ldapQueryHandler.parseQuery(e);if(t&&t.endsWith("*"))r=await this.usersService.findByEmailPrefix(t.slice(0,-1));else{const e=await this.usersService.findByEmail(t);e&&(r=[e])}}catch(e){throw new common_1.InternalServerErrorException({error:e.message,location:__filename})}if(!r)throw new common_1.NotFoundException("User not found in ldap");return r.map((e=>new UserDto_1.UserDto(e)))}async createUser(e){var r,t;try{this.logger.debug(`Create a basic user: ${e}`);if(await this.usersService.findByEmail(e.email))throw new common_1.HttpException("User already exists",409)}catch(s){if(404===s.status)return new UserDto_1.UserDto(await this.usersService.createUser(e));throw new common_1.HttpException(null!==(r=s.message)&&void 0!==r?r:"Something went wrong",null!==(t=s.status)&&void 0!==t?t:500)}}async createOIDCUser(e){var r,t;try{return this.logger.debug(`Create a OIDC user: ${e}`),new UserDto_1.UserDto(await this.keyCloakService.registerUser({email:e.email,firstName:e.firstName,lastName:e.lastName,password:e.password}))}catch(e){throw new common_1.HttpException(null!==(r=e.response.data)&&void 0!==r?r:"Something went wrong",null!==(t=e.response.status)&&void 0!==t?t:500)}}async changeUserInfo(e,r,t){try{const s=await this.usersService.findByEmail(r);if(!s)throw new common_1.NotFoundException("Could not find user");if(this.originEmail(t)!==r)throw new common_1.ForbiddenException;return new UserDto_1.UserDto(await this.usersService.updateUserInfo(s,e))}catch(e){throw new common_1.HttpException(e.message||"Internal server error",e.status||500)}}async getUserInfo(e,r){try{const t=await this.usersService.findByEmail(e);if(!t)throw new common_1.NotFoundException("Could not find user");if(this.originEmail(r)!==e)throw new common_1.ForbiddenException;return new UserDto_1.UserDto(t)}catch(e){throw new common_1.HttpException(e.message||"Internal server error",e.status||500)}}getAdminStatus(e){return this.usersService.getPermissions(e)}async uploadFile(e,r){try{const t=await r.file();await this.usersService.updatePhoto(e,await t.toBuffer())}catch(e){throw new common_1.InternalServerErrorException({error:e.message,location:__filename})}}originEmail(e){return JSON.parse(Buffer.from(e.headers.authorization.split(".")[1],"base64").toString()).user}};__decorate([common_1.Options(),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_OPTIONS_REQUEST}),common_1.Header("Access-Control-Request-Headers","OPTIONS, GET, POST, DELETE"),__metadata("design:type",Function),__metadata("design:paramtypes",[]),__metadata("design:returntype",Promise)],UsersController.prototype,"getTestOptions",null),__decorate([common_1.Get("/one/:email"),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_FIND_USER_BY_EMAIL}),swagger_1.ApiOkResponse({type:UserDto_1.UserDto,description:"Returns user object if it exists"}),swagger_1.ApiNotFoundResponse({description:"User not founded",schema:{type:"object",properties:{statusCode:{type:"number"},message:{type:"string"}}}}),__param(0,common_1.Param("email")),__metadata("design:type",Function),__metadata("design:paramtypes",[String]),__metadata("design:returntype",Promise)],UsersController.prototype,"getUser",null),__decorate([common_1.Get("/one/:email/photo"),common_1.UseGuards(auth_guard_1.AuthGuard),jwt_type_decorator_1.JwtType(auth_service_1.JwtProcessorType.RSA),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_PHOTO_USER_BY_EMAIL}),swagger_1.ApiOkResponse({description:"Returns user profile photo"}),swagger_1.ApiNoContentResponse({description:"Returns empty content if photo is not set"}),swagger_1.ApiForbiddenResponse({description:"Returns then user is not authenticated"}),__param(0,common_1.Param("email")),__param(1,common_1.Res({passthrough:!0})),__metadata("design:type",Function),__metadata("design:paramtypes",[String,Object]),__metadata("design:returntype",Promise)],UsersController.prototype,"getUserPhoto",null),__decorate([common_1.Get("/ldap"),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_LDAP_SEARCH}),swagger_1.ApiOkResponse({type:UserDto_1.UserDto,isArray:!0}),__param(0,common_1.Query("query")),__metadata("design:type",Function),__metadata("design:paramtypes",[String]),__metadata("design:returntype",Promise)],UsersController.prototype,"ldapQuery",null),__decorate([common_1.Post("/basic"),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_CREATE_BASIC_USER}),swagger_1.ApiConflictResponse({schema:{type:"object",properties:{statusCode:{type:"number"},message:{type:"string"},error:{type:"string"}}},description:"User Already exists"}),swagger_1.ApiCreatedResponse({type:UserDto_1.UserDto,description:"User created"}),__param(0,common_1.Body()),__metadata("design:type",Function),__metadata("design:paramtypes",[CreateUserRequest_1.CreateUserRequest]),__metadata("design:returntype",Promise)],UsersController.prototype,"createUser",null),__decorate([common_1.Post("/oidc"),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_CREATE_OIDC_USER}),swagger_1.ApiConflictResponse({schema:{type:"object",properties:{errorMessage:{type:"string"}}},description:"User Already exists"}),swagger_1.ApiCreatedResponse({description:"User created, returns empty object"}),__param(0,common_1.Body()),__metadata("design:type",Function),__metadata("design:paramtypes",[CreateUserRequest_1.CreateUserRequest]),__metadata("design:returntype",Promise)],UsersController.prototype,"createOIDCUser",null),__decorate([common_1.Put("/one/:email/info"),common_1.UseGuards(auth_guard_1.AuthGuard),jwt_type_decorator_1.JwtType(auth_service_1.JwtProcessorType.RSA),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_UPDATE_USER_INFO}),swagger_1.ApiForbiddenResponse({description:"invalid credentials",schema:{type:"object",properties:{statusCode:{type:"number"},message:{type:"string"},error:{type:"string"}}}}),swagger_1.ApiOkResponse({description:"Returns updated user"}),__param(0,common_1.Body()),__param(1,common_1.Param("email")),__param(2,common_1.Req()),__metadata("design:type",Function),__metadata("design:paramtypes",[UserDto_1.UserDto,String,Object]),__metadata("design:returntype",Promise)],UsersController.prototype,"changeUserInfo",null),__decorate([common_1.Get("/one/:email/info"),common_1.UseGuards(auth_guard_1.AuthGuard),jwt_type_decorator_1.JwtType(auth_service_1.JwtProcessorType.RSA),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_FIND_USER_BY_EMAIL}),swagger_1.ApiForbiddenResponse({description:"invalid credentials",schema:{type:"object",properties:{statusCode:{type:"number"},message:{type:"string"},error:{type:"string"}}}}),swagger_1.ApiNotFoundResponse(),swagger_1.ApiOkResponse({description:"Returns user info"}),__param(0,common_1.Param("email")),__param(1,common_1.Req()),__metadata("design:type",Function),__metadata("design:paramtypes",[String,Object]),__metadata("design:returntype",Promise)],UsersController.prototype,"getUserInfo",null),__decorate([common_1.Get("/one/:email/adminpermission"),common_1.UseGuards(auth_guard_1.AuthGuard,users_guard_1.AdminGuard),jwt_type_decorator_1.JwtType(auth_service_1.JwtProcessorType.RSA),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_ADMIN_RIGHTS}),swagger_1.ApiForbiddenResponse({description:"user has no admin rights",schema:{type:"object",properties:{statusCode:{type:"number"},message:{type:"string"}}}}),swagger_1.ApiOkResponse({description:"Returns true if user has admin rights"}),__param(0,common_1.Param("email")),__metadata("design:type",Function),__metadata("design:paramtypes",[String]),__metadata("design:returntype",Promise)],UsersController.prototype,"getAdminStatus",null),__decorate([common_1.Put("/one/:email/photo"),common_1.UseGuards(auth_guard_1.AuthGuard),jwt_type_decorator_1.JwtType(auth_service_1.JwtProcessorType.RSA),swagger_1.ApiOperation({description:users_controller_swagger_desc_1.SWAGGER_DESC_UPLOAD_USER_PHOTO}),swagger_1.ApiOkResponse({description:"Photo updated"}),common_1.UseInterceptors(any_files_interceptor_1.AnyFilesInterceptor),__param(0,common_1.Param("email")),__param(1,common_1.Req()),__metadata("design:type",Function),__metadata("design:paramtypes",[String,Object]),__metadata("design:returntype",Promise)],UsersController.prototype,"uploadFile",null),UsersController=UsersController_1=__decorate([common_1.Controller("/api/users"),common_1.UseInterceptors(common_1.ClassSerializerInterceptor),swagger_1.ApiTags("User controller"),__metadata("design:paramtypes",[users_service_1.UsersService,keycloak_service_1.KeyCloakService])],UsersController),exports.UsersController=UsersController;