"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const core_1=require("@nestjs/core"),app_module_1=require("./app.module"),headers_configurator_interceptor_1=require("./components/headers.configurator.interceptor"),swagger_1=require("@nestjs/swagger"),fastify_cookie_1=require("fastify-cookie"),fastify_session_1=require("fastify-session"),global_exception_filter_1=require("./components/global-exception.filter"),os=require("os"),cluster=require("cluster"),platform_fastify_1=require("@nestjs/platform-fastify"),fastify_multipart_1=require("fastify-multipart"),crypto_1=require("crypto"),http=require("http"),https=require("https"),fastify_1=require("fastify"),rawbody=require("raw-body");async function bootstrap(){http.globalAgent.maxSockets=1/0,https.globalAgent.maxSockets=1/0;const e=fastify_1.default({trustProxy:!0,onProtoPoisoning:"ignore"}),t=await core_1.NestFactory.create(app_module_1.AppModule,new platform_fastify_1.FastifyAdapter(e),{logger:"production"!==process.env.NODE_ENV||["error"]});await e.register(fastify_cookie_1.fastifyCookie),await e.register(fastify_multipart_1.default),await e.register(fastify_session_1.default,{secret:crypto_1.randomBytes(32).toString("hex").slice(0,32),cookieName:"connect.sid",cookie:{secure:!1,httpOnly:!1}}),e.addContentTypeParser("*",(e=>rawbody(e.raw)));const r=t.getHttpAdapter();t.useGlobalInterceptors(new headers_configurator_interceptor_1.HeadersConfiguratorInterceptor).useGlobalFilters(new global_exception_filter_1.GlobalExceptionFilter(r)),t.enableCors({origin:"*",preflightContinue:!0});const o=(new swagger_1.DocumentBuilder).setTitle("Broken Crystals").setDescription("\n  ![BC logo](/assets/img/logo_blue_small.png)\n\n  This is the _Broken Crystals_ REST API.\n\n  _Broken Crystals_ is a benchmark application that uses modern technologies and implements a set of common security vulnerabilities.\n\n  ## Available endpoints\n\n  * [App](#/App%20controller) - common operations\n\n  * [Auth](#/Auth%20controller) - operations with authentication methods\n\n  * [User](#/User%20controller) - operations with users(creation, searching)\n\n  * [Files](#/Files%20controller) - operations with files\n\n  * [Subscriptions](#/Subscriptions%20controller) - operations with subscriptions\n\n  * [Testimonials](#/Testimonials%20controller) - operations with testimonials\n\n  * [Products](#/Products%20controller) â€” operations with products\n\n\n  ").setVersion("1.0").addServer(process.env.URL).build(),s=swagger_1.SwaggerModule.createDocument(t,o);swagger_1.SwaggerModule.setup("swagger",t,s),await t.listen(3e3,"0.0.0.0")}const CPUS=os.cpus().length;if(cluster.isMaster&&"production"===process.env.NODE_ENV){for(let e=0;e<CPUS;e++)cluster.fork();cluster.on("exit",(e=>{console.log(`worker ${e.process.pid} died`)}))}else bootstrap();