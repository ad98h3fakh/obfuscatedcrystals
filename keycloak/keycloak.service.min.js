"use strict";var KeyCloakService_1,__decorate=this&&this.__decorate||function(e,t,i,n){var r,o=arguments.length,s=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,n);else for(var c=e.length-1;c>=0;c--)(r=e[c])&&(s=(o<3?r(s):o>3?r(t,i,s):r(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.KeyCloakService=exports.ClientType=void 0;const common_1=require("@nestjs/common"),config_1=require("@nestjs/config"),assert_1=require("assert"),httpclient_service_1=require("../httpclient/httpclient.service"),keycloak_config_properties_1=require("./keycloak.config.properties"),jwkToPem=require("jwk-to-pem"),querystring_1=require("querystring"),jsonwebtoken_1=require("jsonwebtoken");var ClientType;!function(e){e.ADMIN="admin",e.PUBLIC="public"}(ClientType=exports.ClientType||(exports.ClientType={}));let KeyCloakService=KeyCloakService_1=class{constructor(e,t){this.configService=e,this.httpClient=t,this.log=new common_1.Logger(KeyCloakService_1.name),this.server_uri=this.configService.get(keycloak_config_properties_1.KeyCloakConfigProperties.ENV_KEYCLOAK_SERVER_URI),this.realm=this.configService.get(keycloak_config_properties_1.KeyCloakConfigProperties.ENV_KEYCLOAK_REALM);const i=`${this.server_uri}/realms/${this.realm}/.well-known/openid-configuration`;this.clientPublic={metadata_url:i,client_id:this.configService.get(keycloak_config_properties_1.KeyCloakConfigProperties.ENV_KEYCLOAK_PUBLIC_CLIENT_ID),client_secret:this.configService.get(keycloak_config_properties_1.KeyCloakConfigProperties.ENV_KEYCLOAK_PUBLIC_CLIENT_SECRET)},this.clientAdmin={metadata_url:i,client_id:this.configService.get(keycloak_config_properties_1.KeyCloakConfigProperties.ENV_KEYCLOAK_ADMIN_CLIENT_ID),client_secret:this.configService.get(keycloak_config_properties_1.KeyCloakConfigProperties.ENV_KEYCLOAK_ADMIN_CLIENT_SECRET)}}async onModuleInit(){assert_1.ok(this.realm,'"realm" is not defined.'),assert_1.ok(this.server_uri,'"server_uri" is not defined.'),assert_1.ok(this.clientPublic.client_id,'User "client_id" is not defined.'),assert_1.ok(this.clientPublic.client_secret,'User "client_secret" is not defined.'),assert_1.ok(this.clientAdmin.client_id,'Admin "client_id" is not defined.'),assert_1.ok(this.clientAdmin.client_secret,'Admin "client_secret" is not defined.'),await this.discovery()}async verifyToken(e,t){const i=await this.getJWKs();if(!i.has(t))throw new common_1.UnauthorizedException("Authorization header contains an invalid JWT token.");return jsonwebtoken_1.verify(e,i.get(t),{issuer:this.config.issuer})}async introspectToken(e){assert_1.ok(this.config.introspection_endpoint,'Missing "introspection_endpoint"');const{access_token:t,token_type:i}=await this.generateToken(),n=querystring_1.stringify({token:e});return this.httpClient.post(this.config.introspection_endpoint,n,{headers:{Authorization:`${i} ${t}`,"Content-Type":"application/x-www-form-urlencoded"}})}async registerUser({firstName:e,lastName:t,email:i,password:n}){this.log.debug("Called registerUser");const{access_token:r,token_type:o}=await this.generateToken();return this.httpClient.post(`${this.server_uri}/admin/realms/${this.realm}/users`,{firstName:e,lastName:t,email:i,enabled:!0,username:i,credentials:[{type:"password",value:n,temporary:!1}]},{headers:{"Content-Type":"application/json",Authorization:`${o} ${r}`},responseType:"json"})}async generateToken(e){const t=Object.assign({},this.clientAdmin);return e?Object.assign(t,Object.assign(Object.assign({},e),{grant_type:"password"})):Object.assign(t,{grant_type:"client_credentials"}),this.httpClient.post(this.config.token_endpoint,querystring_1.stringify(t),{headers:{"Content-Type":"application/x-www-form-urlencoded"},responseType:"json"})}getClient(e){return e===ClientType.ADMIN?this.clientAdmin:this.clientPublic}async discovery(){this.config=await this.httpClient.loadJSON(this.clientAdmin.metadata_url)}async getJWKs(){assert_1.ok(this.config.jwks_uri,'Missing "jwks_uri"');const e=await this.httpClient.loadJSON(this.config.jwks_uri);if(!e.keys)throw new common_1.InternalServerErrorException("Internal error occurred downloading JWKS data.");return new Map(e.keys.map((e=>[e.kid,jwkToPem(e)])))}};KeyCloakService=KeyCloakService_1=__decorate([common_1.Injectable(),__metadata("design:paramtypes",[config_1.ConfigService,httpclient_service_1.HttpClientService])],KeyCloakService),exports.KeyCloakService=KeyCloakService;